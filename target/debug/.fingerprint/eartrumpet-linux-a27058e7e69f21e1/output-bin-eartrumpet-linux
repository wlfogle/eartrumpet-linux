{"$message_type":"diagnostic","message":"the trait bound `gtk4::ListBox: glib::clone::Downgrade` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5502,"byte_end":9236,"line_start":142,"line_end":230,"column_start":22,"column_end":7,"is_primary":true,"text":[{"text":"    let refresh_ui = clone!(@weak sinks_list, @weak streams_list, @weak default_sink_label => move || {","highlight_start":22,"highlight_end":104},{"text":"        // Update default sink label","highlight_start":1,"highlight_end":37},{"text":"        if let Some(def) = get_default_sink_name() {","highlight_start":1,"highlight_end":53},{"text":"            default_sink_label.set_text(&format!(\"Default sink: {}\", def));","highlight_start":1,"highlight_end":76},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            default_sink_label.set_text(\"Default sink: <unknown>\");","highlight_start":1,"highlight_end":68},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Populate sinks","highlight_start":1,"highlight_end":26},{"text":"        for child in sinks_list.children() { sinks_list.remove(&child); }","highlight_start":1,"highlight_end":74},{"text":"        let ss = sinks();","highlight_start":1,"highlight_end":26},{"text":"        for s in ss.iter() {","highlight_start":1,"highlight_end":29},{"text":"            let row = ListBoxRow::new();","highlight_start":1,"highlight_end":41},{"text":"            let row_box = GtkBox::new(Orientation::Horizontal, 6);","highlight_start":1,"highlight_end":67},{"text":"            let lbl = Label::new(Some(&format!(\"#{} {}\", s.index, s.description)));","highlight_start":1,"highlight_end":84},{"text":"            lbl.set_xalign(0.0);","highlight_start":1,"highlight_end":33},{"text":"            row_box.append(&lbl);","highlight_start":1,"highlight_end":34},{"text":"            let set_default = Button::with_label(\"Set Default\");","highlight_start":1,"highlight_end":65},{"text":"            let sink_name = s.name.clone();","highlight_start":1,"highlight_end":44},{"text":"            set_default.connect_clicked(clone!(@strong sink_name => move |_| { set_default_sink(&sink_name); }));","highlight_start":1,"highlight_end":114},{"text":"            row_box.append(&set_default);","highlight_start":1,"highlight_end":42},{"text":"            row.set_child(Some(&row_box));","highlight_start":1,"highlight_end":43},{"text":"            sinks_list.append(&row);","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Populate sink inputs","highlight_start":1,"highlight_end":32},{"text":"        for child in streams_list.children() { streams_list.remove(&child); }","highlight_start":1,"highlight_end":78},{"text":"        let sinputs = sink_inputs();","highlight_start":1,"highlight_end":37},{"text":"        let sinks_now = sinks();","highlight_start":1,"highlight_end":33},{"text":"        for si in sinputs.iter() {","highlight_start":1,"highlight_end":35},{"text":"            let row = ListBoxRow::new();","highlight_start":1,"highlight_end":41},{"text":"            let row_box = GtkBox::new(Orientation::Vertical, 4);","highlight_start":1,"highlight_end":65},{"text":"            let title = format!(\"#{}  {}  â€”  {}\", si.index, si.app_name, si.media_name);","highlight_start":1,"highlight_end":89},{"text":"            row_box.append(&Label::new(Some(&title)));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Controls row","highlight_start":1,"highlight_end":28},{"text":"            let controls = GtkBox::new(Orientation::Horizontal, 6);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Volume slider","highlight_start":1,"highlight_end":29},{"text":"            let adj = Adjustment::new(si.volume_percent, 0.0, 150.0, 1.0, 10.0, 0.0);","highlight_start":1,"highlight_end":86},{"text":"            let slider = Scale::new(Orientation::Horizontal, Some(&adj));","highlight_start":1,"highlight_end":74},{"text":"            slider.set_draw_value(true);","highlight_start":1,"highlight_end":41},{"text":"            slider.set_hexpand(true);","highlight_start":1,"highlight_end":38},{"text":"            controls.append(&Label::new(Some(\"Volume:\")));","highlight_start":1,"highlight_end":59},{"text":"            controls.append(&slider);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Mute toggle","highlight_start":1,"highlight_end":27},{"text":"            let mute_btn = Button::with_label(if si.mute { \"Unmute\" } else { \"Mute\" });","highlight_start":1,"highlight_end":88},{"text":"            let idx_mute = si.index;","highlight_start":1,"highlight_end":37},{"text":"            mute_btn.connect_clicked(move |b| {","highlight_start":1,"highlight_end":48},{"text":"                let to = b.label().map(|t| t.to_string()).unwrap_or_default() == \"Mute\";","highlight_start":1,"highlight_end":89},{"text":"                set_sink_input_mute(idx_mute, to);","highlight_start":1,"highlight_end":51},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"            controls.append(&mute_btn);","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Move combobox","highlight_start":1,"highlight_end":29},{"text":"            let combo = ComboBoxText::new();","highlight_start":1,"highlight_end":45},{"text":"            for sk in sinks_now.iter() {","highlight_start":1,"highlight_end":41},{"text":"                combo.append_text(&format!(\"#{} {}\", sk.index, sk.description));","highlight_start":1,"highlight_end":81},{"text":"                // store sink name in ID is trickier; we will move by index string","highlight_start":1,"highlight_end":83},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            combo.set_active(Some(0));","highlight_start":1,"highlight_end":39},{"text":"            let idx_move = si.index;","highlight_start":1,"highlight_end":37},{"text":"            let sink_map: Vec<String> = sinks_now.iter().map(|sk| sk.index.to_string()).collect();","highlight_start":1,"highlight_end":99},{"text":"            combo.connect_changed(move |c| {","highlight_start":1,"highlight_end":45},{"text":"                if let Some(i) = c.active() {","highlight_start":1,"highlight_end":46},{"text":"                    if let Some(sink_idx_str) = sink_map.get(i as usize) {","highlight_start":1,"highlight_end":75},{"text":"                        move_sink_input(idx_move, sink_idx_str);","highlight_start":1,"highlight_end":65},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"            controls.append(&Label::new(Some(\"Move to:\")));","highlight_start":1,"highlight_end":60},{"text":"            controls.append(&combo);","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            row_box.append(&controls);","highlight_start":1,"highlight_end":39},{"text":"            row.set_child(Some(&row_box));","highlight_start":1,"highlight_end":43},{"text":"            streams_list.append(&row);","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Apply volume on slider change","highlight_start":1,"highlight_end":45},{"text":"            let idx_vol = si.index;","highlight_start":1,"highlight_end":36},{"text":"            slider.connect_value_changed(move |s| {","highlight_start":1,"highlight_end":52},{"text":"                let v = s.value();","highlight_start":1,"highlight_end":35},{"text":"                set_sink_input_volume(idx_vol, v);","highlight_start":1,"highlight_end":51},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        sinks_list.show_all();","highlight_start":1,"highlight_end":31},{"text":"        streams_list.show_all();","highlight_start":1,"highlight_end":33},{"text":"    });","highlight_start":1,"highlight_end":7}],"label":"the trait `glib::clone::Downgrade` is not implemented for `gtk4::ListBox`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":5502,"byte_end":9236,"line_start":142,"line_end":230,"column_start":22,"column_end":7,"is_primary":false,"text":[{"text":"    let refresh_ui = clone!(@weak sinks_list, @weak streams_list, @weak default_sink_label => move || {","highlight_start":22,"highlight_end":104},{"text":"        // Update default sink label","highlight_start":1,"highlight_end":37},{"text":"        if let Some(def) = get_default_sink_name() {","highlight_start":1,"highlight_end":53},{"text":"            default_sink_label.set_text(&format!(\"Default sink: {}\", def));","highlight_start":1,"highlight_end":76},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            default_sink_label.set_text(\"Default sink: <unknown>\");","highlight_start":1,"highlight_end":68},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Populate sinks","highlight_start":1,"highlight_end":26},{"text":"        for child in sinks_list.children() { sinks_list.remove(&child); }","highlight_start":1,"highlight_end":74},{"text":"        let ss = sinks();","highlight_start":1,"highlight_end":26},{"text":"        for s in ss.iter() {","highlight_start":1,"highlight_end":29},{"text":"            let row = ListBoxRow::new();","highlight_start":1,"highlight_end":41},{"text":"            let row_box = GtkBox::new(Orientation::Horizontal, 6);","highlight_start":1,"highlight_end":67},{"text":"            let lbl = Label::new(Some(&format!(\"#{} {}\", s.index, s.description)));","highlight_start":1,"highlight_end":84},{"text":"            lbl.set_xalign(0.0);","highlight_start":1,"highlight_end":33},{"text":"            row_box.append(&lbl);","highlight_start":1,"highlight_end":34},{"text":"            let set_default = Button::with_label(\"Set Default\");","highlight_start":1,"highlight_end":65},{"text":"            let sink_name = s.name.clone();","highlight_start":1,"highlight_end":44},{"text":"            set_default.connect_clicked(clone!(@strong sink_name => move |_| { set_default_sink(&sink_name); }));","highlight_start":1,"highlight_end":114},{"text":"            row_box.append(&set_default);","highlight_start":1,"highlight_end":42},{"text":"            row.set_child(Some(&row_box));","highlight_start":1,"highlight_end":43},{"text":"            sinks_list.append(&row);","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Populate sink inputs","highlight_start":1,"highlight_end":32},{"text":"        for child in streams_list.children() { streams_list.remove(&child); }","highlight_start":1,"highlight_end":78},{"text":"        let sinputs = sink_inputs();","highlight_start":1,"highlight_end":37},{"text":"        let sinks_now = sinks();","highlight_start":1,"highlight_end":33},{"text":"        for si in sinputs.iter() {","highlight_start":1,"highlight_end":35},{"text":"            let row = ListBoxRow::new();","highlight_start":1,"highlight_end":41},{"text":"            let row_box = GtkBox::new(Orientation::Vertical, 4);","highlight_start":1,"highlight_end":65},{"text":"            let title = format!(\"#{}  {}  â€”  {}\", si.index, si.app_name, si.media_name);","highlight_start":1,"highlight_end":89},{"text":"            row_box.append(&Label::new(Some(&title)));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Controls row","highlight_start":1,"highlight_end":28},{"text":"            let controls = GtkBox::new(Orientation::Horizontal, 6);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Volume slider","highlight_start":1,"highlight_end":29},{"text":"            let adj = Adjustment::new(si.volume_percent, 0.0, 150.0, 1.0, 10.0, 0.0);","highlight_start":1,"highlight_end":86},{"text":"            let slider = Scale::new(Orientation::Horizontal, Some(&adj));","highlight_start":1,"highlight_end":74},{"text":"            slider.set_draw_value(true);","highlight_start":1,"highlight_end":41},{"text":"            slider.set_hexpand(true);","highlight_start":1,"highlight_end":38},{"text":"            controls.append(&Label::new(Some(\"Volume:\")));","highlight_start":1,"highlight_end":59},{"text":"            controls.append(&slider);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Mute toggle","highlight_start":1,"highlight_end":27},{"text":"            let mute_btn = Button::with_label(if si.mute { \"Unmute\" } else { \"Mute\" });","highlight_start":1,"highlight_end":88},{"text":"            let idx_mute = si.index;","highlight_start":1,"highlight_end":37},{"text":"            mute_btn.connect_clicked(move |b| {","highlight_start":1,"highlight_end":48},{"text":"                let to = b.label().map(|t| t.to_string()).unwrap_or_default() == \"Mute\";","highlight_start":1,"highlight_end":89},{"text":"                set_sink_input_mute(idx_mute, to);","highlight_start":1,"highlight_end":51},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"            controls.append(&mute_btn);","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Move combobox","highlight_start":1,"highlight_end":29},{"text":"            let combo = ComboBoxText::new();","highlight_start":1,"highlight_end":45},{"text":"            for sk in sinks_now.iter() {","highlight_start":1,"highlight_end":41},{"text":"                combo.append_text(&format!(\"#{} {}\", sk.index, sk.description));","highlight_start":1,"highlight_end":81},{"text":"                // store sink name in ID is trickier; we will move by index string","highlight_start":1,"highlight_end":83},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            combo.set_active(Some(0));","highlight_start":1,"highlight_end":39},{"text":"            let idx_move = si.index;","highlight_start":1,"highlight_end":37},{"text":"            let sink_map: Vec<String> = sinks_now.iter().map(|sk| sk.index.to_string()).collect();","highlight_start":1,"highlight_end":99},{"text":"            combo.connect_changed(move |c| {","highlight_start":1,"highlight_end":45},{"text":"                if let Some(i) = c.active() {","highlight_start":1,"highlight_end":46},{"text":"                    if let Some(sink_idx_str) = sink_map.get(i as usize) {","highlight_start":1,"highlight_end":75},{"text":"                        move_sink_input(idx_move, sink_idx_str);","highlight_start":1,"highlight_end":65},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"            controls.append(&Label::new(Some(\"Move to:\")));","highlight_start":1,"highlight_end":60},{"text":"            controls.append(&combo);","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            row_box.append(&controls);","highlight_start":1,"highlight_end":39},{"text":"            row.set_child(Some(&row_box));","highlight_start":1,"highlight_end":43},{"text":"            streams_list.append(&row);","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Apply volume on slider change","highlight_start":1,"highlight_end":45},{"text":"            let idx_vol = si.index;","highlight_start":1,"highlight_end":36},{"text":"            slider.connect_value_changed(move |s| {","highlight_start":1,"highlight_end":52},{"text":"                let v = s.value();","highlight_start":1,"highlight_end":35},{"text":"                set_sink_input_volume(idx_vol, v);","highlight_start":1,"highlight_end":51},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        sinks_list.show_all();","highlight_start":1,"highlight_end":31},{"text":"        streams_list.show_all();","highlight_start":1,"highlight_end":33},{"text":"    });","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clone!","def_site_span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-macros-0.18.5/src/lib.rs","byte_start":6995,"byte_end":7014,"line_start":286,"line_end":286,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"#[proc_macro_error]","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"there are multiple different versions of crate `glib` in the dependency graph","code":null,"level":"note","spans":[{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.18.5/src/clone.rs","byte_start":275,"byte_end":294,"line_start":11,"line_end":11,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait Downgrade","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":258,"byte_end":262,"line_start":6,"line_end":6,"column_start":5,"column_end":9,"is_primary":false,"text":[{"text":"use glib::{clone, timeout_add_local};","highlight_start":5,"highlight_end":9}],"label":"one version of crate `glib` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":4,"byte_end":8,"line_start":1,"line_end":1,"column_start":5,"column_end":9,"is_primary":false,"text":[{"text":"use gtk4::prelude::*;","highlight_start":5,"highlight_end":9}],"label":"one version of crate `glib` used here, as a dependency of crate `cairo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":18386,"byte_end":18614,"line_start":623,"line_end":626,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $visibility struct $name $(<$($generic $(: $bound $(+ $bound2)*)?),+>)? {","highlight_start":9,"highlight_end":82},{"text":"            inner: $crate::object::TypedObjectRef<$impl_type, $parent_type>,","highlight_start":1,"highlight_end":77},{"text":"            phantom: std::marker::PhantomData<($($($generic),+)?)>,","highlight_start":1,"highlight_end":68},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":47975,"byte_end":48206,"line_start":1235,"line_end":1238,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::glib_object_wrapper!(","highlight_start":9,"highlight_end":38},{"text":"            @generic_impl [$($attr)*] $visibility $name $(<$($generic $(: $bound $(+ $bound2)*)?),+>)?, $impl_type, $parent_type, $ffi_name, $ffi_class_name,","highlight_start":1,"highlight_end":158},{"text":"            @type_ $get_type_expr","highlight_start":1,"highlight_end":34},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":47365,"byte_end":47662,"line_start":1227,"line_end":1230,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::glib_object_wrapper!(","highlight_start":9,"highlight_end":38},{"text":"            @object [$($attr)*] $visibility $name $(<$($generic $(: $bound $(+ $bound2)*)?),+>)?, $impl_type, $parent_type, $ffi_name, @ffi_class std::os::raw::c_void,","highlight_start":1,"highlight_end":168},{"text":"            @type_ $get_type_expr, @extends [$($extends)*], @implements [$($implements)*]","highlight_start":1,"highlight_end":90},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/wrapper.rs","byte_start":12241,"byte_end":12586,"line_start":383,"line_end":389,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::glib_object_wrapper!(","highlight_start":9,"highlight_end":38},{"text":"            @object [$($attr)*] $visibility $name $(<$($generic $(: $bound $(+ $bound2)*)?),+>)?, *mut std::os::raw::c_void, (), $ffi_name,","highlight_start":1,"highlight_end":140},{"text":"            $( @ffi_class $ffi_class_name ,)?","highlight_start":1,"highlight_end":46},{"text":"            @type_ $get_type_expr,","highlight_start":1,"highlight_end":35},{"text":"            @extends [$($extends),+],","highlight_start":1,"highlight_end":38},{"text":"            @implements [$($($implements),+)?]","highlight_start":1,"highlight_end":47},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gtk4-0.8.2/src/auto/list_box.rs","byte_start":435,"byte_end":676,"line_start":16,"line_end":23,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"glib::wrapper! {","highlight_start":1,"highlight_end":1},{"text":"    #[doc(alias = \"GtkListBox\")]","highlight_start":1,"highlight_end":1},{"text":"    pub struct ListBox(Object<ffi::GtkListBox>) @extends Widget, @implements Accessible, Buildable, ConstraintTarget;","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    match fn {","highlight_start":1,"highlight_end":1},{"text":"        type_ => || ffi::gtk_list_box_get_type(),","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"glib::wrapper!","def_site_span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/wrapper.rs","byte_start":8387,"byte_end":8407,"line_start":277,"line_end":277,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! wrapper {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::glib_object_wrapper!","def_site_span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":17988,"byte_end":18020,"line_start":618,"line_end":618,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! glib_object_wrapper {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::glib_object_wrapper!","def_site_span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":17988,"byte_end":18020,"line_start":618,"line_end":618,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! glib_object_wrapper {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::glib_object_wrapper!","def_site_span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":17988,"byte_end":18020,"line_start":618,"line_end":618,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! glib_object_wrapper {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/clone.rs","byte_start":298,"byte_end":317,"line_start":12,"line_end":12,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait Downgrade","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `gtk4::ListBox: glib::clone::Downgrade` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:142:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let refresh_ui = clone!(@weak sinks_list, @weak streams_list, @weak default_sink_label => move || {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m ______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // Update default sink label\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(def) = get_default_sink_name() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            default_sink_label.set_text(&format!(\"Default sink: {}\", def));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        streams_list.show_all();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    });\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `glib::clone::Downgrade` is not implemented for `gtk4::ListBox`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mglib\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.18.5/src/clone.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Downgrade\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:1:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse gtk4::prelude::*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `glib` used here, as a dependency of crate `cairo`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse glib::{clone, timeout_add_local};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `glib` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/clone.rs:12:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Downgrade\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gtk4-0.8.2/src/auto/list_box.rs:16:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mglib::wrapper! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[doc(alias = \"GtkListBox\")]\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct ListBox(Object<ffi::GtkListBox>) @extends Widget, @implements Accessible, Buildable, ConstraintTarget;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `clone` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `gtk4::Label: glib::clone::Downgrade` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5502,"byte_end":9236,"line_start":142,"line_end":230,"column_start":22,"column_end":7,"is_primary":true,"text":[{"text":"    let refresh_ui = clone!(@weak sinks_list, @weak streams_list, @weak default_sink_label => move || {","highlight_start":22,"highlight_end":104},{"text":"        // Update default sink label","highlight_start":1,"highlight_end":37},{"text":"        if let Some(def) = get_default_sink_name() {","highlight_start":1,"highlight_end":53},{"text":"            default_sink_label.set_text(&format!(\"Default sink: {}\", def));","highlight_start":1,"highlight_end":76},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            default_sink_label.set_text(\"Default sink: <unknown>\");","highlight_start":1,"highlight_end":68},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Populate sinks","highlight_start":1,"highlight_end":26},{"text":"        for child in sinks_list.children() { sinks_list.remove(&child); }","highlight_start":1,"highlight_end":74},{"text":"        let ss = sinks();","highlight_start":1,"highlight_end":26},{"text":"        for s in ss.iter() {","highlight_start":1,"highlight_end":29},{"text":"            let row = ListBoxRow::new();","highlight_start":1,"highlight_end":41},{"text":"            let row_box = GtkBox::new(Orientation::Horizontal, 6);","highlight_start":1,"highlight_end":67},{"text":"            let lbl = Label::new(Some(&format!(\"#{} {}\", s.index, s.description)));","highlight_start":1,"highlight_end":84},{"text":"            lbl.set_xalign(0.0);","highlight_start":1,"highlight_end":33},{"text":"            row_box.append(&lbl);","highlight_start":1,"highlight_end":34},{"text":"            let set_default = Button::with_label(\"Set Default\");","highlight_start":1,"highlight_end":65},{"text":"            let sink_name = s.name.clone();","highlight_start":1,"highlight_end":44},{"text":"            set_default.connect_clicked(clone!(@strong sink_name => move |_| { set_default_sink(&sink_name); }));","highlight_start":1,"highlight_end":114},{"text":"            row_box.append(&set_default);","highlight_start":1,"highlight_end":42},{"text":"            row.set_child(Some(&row_box));","highlight_start":1,"highlight_end":43},{"text":"            sinks_list.append(&row);","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Populate sink inputs","highlight_start":1,"highlight_end":32},{"text":"        for child in streams_list.children() { streams_list.remove(&child); }","highlight_start":1,"highlight_end":78},{"text":"        let sinputs = sink_inputs();","highlight_start":1,"highlight_end":37},{"text":"        let sinks_now = sinks();","highlight_start":1,"highlight_end":33},{"text":"        for si in sinputs.iter() {","highlight_start":1,"highlight_end":35},{"text":"            let row = ListBoxRow::new();","highlight_start":1,"highlight_end":41},{"text":"            let row_box = GtkBox::new(Orientation::Vertical, 4);","highlight_start":1,"highlight_end":65},{"text":"            let title = format!(\"#{}  {}  â€”  {}\", si.index, si.app_name, si.media_name);","highlight_start":1,"highlight_end":89},{"text":"            row_box.append(&Label::new(Some(&title)));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Controls row","highlight_start":1,"highlight_end":28},{"text":"            let controls = GtkBox::new(Orientation::Horizontal, 6);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Volume slider","highlight_start":1,"highlight_end":29},{"text":"            let adj = Adjustment::new(si.volume_percent, 0.0, 150.0, 1.0, 10.0, 0.0);","highlight_start":1,"highlight_end":86},{"text":"            let slider = Scale::new(Orientation::Horizontal, Some(&adj));","highlight_start":1,"highlight_end":74},{"text":"            slider.set_draw_value(true);","highlight_start":1,"highlight_end":41},{"text":"            slider.set_hexpand(true);","highlight_start":1,"highlight_end":38},{"text":"            controls.append(&Label::new(Some(\"Volume:\")));","highlight_start":1,"highlight_end":59},{"text":"            controls.append(&slider);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Mute toggle","highlight_start":1,"highlight_end":27},{"text":"            let mute_btn = Button::with_label(if si.mute { \"Unmute\" } else { \"Mute\" });","highlight_start":1,"highlight_end":88},{"text":"            let idx_mute = si.index;","highlight_start":1,"highlight_end":37},{"text":"            mute_btn.connect_clicked(move |b| {","highlight_start":1,"highlight_end":48},{"text":"                let to = b.label().map(|t| t.to_string()).unwrap_or_default() == \"Mute\";","highlight_start":1,"highlight_end":89},{"text":"                set_sink_input_mute(idx_mute, to);","highlight_start":1,"highlight_end":51},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"            controls.append(&mute_btn);","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Move combobox","highlight_start":1,"highlight_end":29},{"text":"            let combo = ComboBoxText::new();","highlight_start":1,"highlight_end":45},{"text":"            for sk in sinks_now.iter() {","highlight_start":1,"highlight_end":41},{"text":"                combo.append_text(&format!(\"#{} {}\", sk.index, sk.description));","highlight_start":1,"highlight_end":81},{"text":"                // store sink name in ID is trickier; we will move by index string","highlight_start":1,"highlight_end":83},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            combo.set_active(Some(0));","highlight_start":1,"highlight_end":39},{"text":"            let idx_move = si.index;","highlight_start":1,"highlight_end":37},{"text":"            let sink_map: Vec<String> = sinks_now.iter().map(|sk| sk.index.to_string()).collect();","highlight_start":1,"highlight_end":99},{"text":"            combo.connect_changed(move |c| {","highlight_start":1,"highlight_end":45},{"text":"                if let Some(i) = c.active() {","highlight_start":1,"highlight_end":46},{"text":"                    if let Some(sink_idx_str) = sink_map.get(i as usize) {","highlight_start":1,"highlight_end":75},{"text":"                        move_sink_input(idx_move, sink_idx_str);","highlight_start":1,"highlight_end":65},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"            controls.append(&Label::new(Some(\"Move to:\")));","highlight_start":1,"highlight_end":60},{"text":"            controls.append(&combo);","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            row_box.append(&controls);","highlight_start":1,"highlight_end":39},{"text":"            row.set_child(Some(&row_box));","highlight_start":1,"highlight_end":43},{"text":"            streams_list.append(&row);","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Apply volume on slider change","highlight_start":1,"highlight_end":45},{"text":"            let idx_vol = si.index;","highlight_start":1,"highlight_end":36},{"text":"            slider.connect_value_changed(move |s| {","highlight_start":1,"highlight_end":52},{"text":"                let v = s.value();","highlight_start":1,"highlight_end":35},{"text":"                set_sink_input_volume(idx_vol, v);","highlight_start":1,"highlight_end":51},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        sinks_list.show_all();","highlight_start":1,"highlight_end":31},{"text":"        streams_list.show_all();","highlight_start":1,"highlight_end":33},{"text":"    });","highlight_start":1,"highlight_end":7}],"label":"the trait `glib::clone::Downgrade` is not implemented for `gtk4::Label`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":5502,"byte_end":9236,"line_start":142,"line_end":230,"column_start":22,"column_end":7,"is_primary":false,"text":[{"text":"    let refresh_ui = clone!(@weak sinks_list, @weak streams_list, @weak default_sink_label => move || {","highlight_start":22,"highlight_end":104},{"text":"        // Update default sink label","highlight_start":1,"highlight_end":37},{"text":"        if let Some(def) = get_default_sink_name() {","highlight_start":1,"highlight_end":53},{"text":"            default_sink_label.set_text(&format!(\"Default sink: {}\", def));","highlight_start":1,"highlight_end":76},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            default_sink_label.set_text(\"Default sink: <unknown>\");","highlight_start":1,"highlight_end":68},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Populate sinks","highlight_start":1,"highlight_end":26},{"text":"        for child in sinks_list.children() { sinks_list.remove(&child); }","highlight_start":1,"highlight_end":74},{"text":"        let ss = sinks();","highlight_start":1,"highlight_end":26},{"text":"        for s in ss.iter() {","highlight_start":1,"highlight_end":29},{"text":"            let row = ListBoxRow::new();","highlight_start":1,"highlight_end":41},{"text":"            let row_box = GtkBox::new(Orientation::Horizontal, 6);","highlight_start":1,"highlight_end":67},{"text":"            let lbl = Label::new(Some(&format!(\"#{} {}\", s.index, s.description)));","highlight_start":1,"highlight_end":84},{"text":"            lbl.set_xalign(0.0);","highlight_start":1,"highlight_end":33},{"text":"            row_box.append(&lbl);","highlight_start":1,"highlight_end":34},{"text":"            let set_default = Button::with_label(\"Set Default\");","highlight_start":1,"highlight_end":65},{"text":"            let sink_name = s.name.clone();","highlight_start":1,"highlight_end":44},{"text":"            set_default.connect_clicked(clone!(@strong sink_name => move |_| { set_default_sink(&sink_name); }));","highlight_start":1,"highlight_end":114},{"text":"            row_box.append(&set_default);","highlight_start":1,"highlight_end":42},{"text":"            row.set_child(Some(&row_box));","highlight_start":1,"highlight_end":43},{"text":"            sinks_list.append(&row);","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Populate sink inputs","highlight_start":1,"highlight_end":32},{"text":"        for child in streams_list.children() { streams_list.remove(&child); }","highlight_start":1,"highlight_end":78},{"text":"        let sinputs = sink_inputs();","highlight_start":1,"highlight_end":37},{"text":"        let sinks_now = sinks();","highlight_start":1,"highlight_end":33},{"text":"        for si in sinputs.iter() {","highlight_start":1,"highlight_end":35},{"text":"            let row = ListBoxRow::new();","highlight_start":1,"highlight_end":41},{"text":"            let row_box = GtkBox::new(Orientation::Vertical, 4);","highlight_start":1,"highlight_end":65},{"text":"            let title = format!(\"#{}  {}  â€”  {}\", si.index, si.app_name, si.media_name);","highlight_start":1,"highlight_end":89},{"text":"            row_box.append(&Label::new(Some(&title)));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Controls row","highlight_start":1,"highlight_end":28},{"text":"            let controls = GtkBox::new(Orientation::Horizontal, 6);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Volume slider","highlight_start":1,"highlight_end":29},{"text":"            let adj = Adjustment::new(si.volume_percent, 0.0, 150.0, 1.0, 10.0, 0.0);","highlight_start":1,"highlight_end":86},{"text":"            let slider = Scale::new(Orientation::Horizontal, Some(&adj));","highlight_start":1,"highlight_end":74},{"text":"            slider.set_draw_value(true);","highlight_start":1,"highlight_end":41},{"text":"            slider.set_hexpand(true);","highlight_start":1,"highlight_end":38},{"text":"            controls.append(&Label::new(Some(\"Volume:\")));","highlight_start":1,"highlight_end":59},{"text":"            controls.append(&slider);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Mute toggle","highlight_start":1,"highlight_end":27},{"text":"            let mute_btn = Button::with_label(if si.mute { \"Unmute\" } else { \"Mute\" });","highlight_start":1,"highlight_end":88},{"text":"            let idx_mute = si.index;","highlight_start":1,"highlight_end":37},{"text":"            mute_btn.connect_clicked(move |b| {","highlight_start":1,"highlight_end":48},{"text":"                let to = b.label().map(|t| t.to_string()).unwrap_or_default() == \"Mute\";","highlight_start":1,"highlight_end":89},{"text":"                set_sink_input_mute(idx_mute, to);","highlight_start":1,"highlight_end":51},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"            controls.append(&mute_btn);","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Move combobox","highlight_start":1,"highlight_end":29},{"text":"            let combo = ComboBoxText::new();","highlight_start":1,"highlight_end":45},{"text":"            for sk in sinks_now.iter() {","highlight_start":1,"highlight_end":41},{"text":"                combo.append_text(&format!(\"#{} {}\", sk.index, sk.description));","highlight_start":1,"highlight_end":81},{"text":"                // store sink name in ID is trickier; we will move by index string","highlight_start":1,"highlight_end":83},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            combo.set_active(Some(0));","highlight_start":1,"highlight_end":39},{"text":"            let idx_move = si.index;","highlight_start":1,"highlight_end":37},{"text":"            let sink_map: Vec<String> = sinks_now.iter().map(|sk| sk.index.to_string()).collect();","highlight_start":1,"highlight_end":99},{"text":"            combo.connect_changed(move |c| {","highlight_start":1,"highlight_end":45},{"text":"                if let Some(i) = c.active() {","highlight_start":1,"highlight_end":46},{"text":"                    if let Some(sink_idx_str) = sink_map.get(i as usize) {","highlight_start":1,"highlight_end":75},{"text":"                        move_sink_input(idx_move, sink_idx_str);","highlight_start":1,"highlight_end":65},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"            controls.append(&Label::new(Some(\"Move to:\")));","highlight_start":1,"highlight_end":60},{"text":"            controls.append(&combo);","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            row_box.append(&controls);","highlight_start":1,"highlight_end":39},{"text":"            row.set_child(Some(&row_box));","highlight_start":1,"highlight_end":43},{"text":"            streams_list.append(&row);","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Apply volume on slider change","highlight_start":1,"highlight_end":45},{"text":"            let idx_vol = si.index;","highlight_start":1,"highlight_end":36},{"text":"            slider.connect_value_changed(move |s| {","highlight_start":1,"highlight_end":52},{"text":"                let v = s.value();","highlight_start":1,"highlight_end":35},{"text":"                set_sink_input_volume(idx_vol, v);","highlight_start":1,"highlight_end":51},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        sinks_list.show_all();","highlight_start":1,"highlight_end":31},{"text":"        streams_list.show_all();","highlight_start":1,"highlight_end":33},{"text":"    });","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clone!","def_site_span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-macros-0.18.5/src/lib.rs","byte_start":6995,"byte_end":7014,"line_start":286,"line_end":286,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"#[proc_macro_error]","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"there are multiple different versions of crate `glib` in the dependency graph","code":null,"level":"note","spans":[{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.18.5/src/clone.rs","byte_start":275,"byte_end":294,"line_start":11,"line_end":11,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub trait Downgrade","highlight_start":1,"highlight_end":20}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":258,"byte_end":262,"line_start":6,"line_end":6,"column_start":5,"column_end":9,"is_primary":false,"text":[{"text":"use glib::{clone, timeout_add_local};","highlight_start":5,"highlight_end":9}],"label":"one version of crate `glib` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":4,"byte_end":8,"line_start":1,"line_end":1,"column_start":5,"column_end":9,"is_primary":false,"text":[{"text":"use gtk4::prelude::*;","highlight_start":5,"highlight_end":9}],"label":"one version of crate `glib` used here, as a dependency of crate `cairo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":18386,"byte_end":18614,"line_start":623,"line_end":626,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $visibility struct $name $(<$($generic $(: $bound $(+ $bound2)*)?),+>)? {","highlight_start":9,"highlight_end":82},{"text":"            inner: $crate::object::TypedObjectRef<$impl_type, $parent_type>,","highlight_start":1,"highlight_end":77},{"text":"            phantom: std::marker::PhantomData<($($($generic),+)?)>,","highlight_start":1,"highlight_end":68},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":47975,"byte_end":48206,"line_start":1235,"line_end":1238,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::glib_object_wrapper!(","highlight_start":9,"highlight_end":38},{"text":"            @generic_impl [$($attr)*] $visibility $name $(<$($generic $(: $bound $(+ $bound2)*)?),+>)?, $impl_type, $parent_type, $ffi_name, $ffi_class_name,","highlight_start":1,"highlight_end":158},{"text":"            @type_ $get_type_expr","highlight_start":1,"highlight_end":34},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":47365,"byte_end":47662,"line_start":1227,"line_end":1230,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::glib_object_wrapper!(","highlight_start":9,"highlight_end":38},{"text":"            @object [$($attr)*] $visibility $name $(<$($generic $(: $bound $(+ $bound2)*)?),+>)?, $impl_type, $parent_type, $ffi_name, @ffi_class std::os::raw::c_void,","highlight_start":1,"highlight_end":168},{"text":"            @type_ $get_type_expr, @extends [$($extends)*], @implements [$($implements)*]","highlight_start":1,"highlight_end":90},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/wrapper.rs","byte_start":12241,"byte_end":12586,"line_start":383,"line_end":389,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::glib_object_wrapper!(","highlight_start":9,"highlight_end":38},{"text":"            @object [$($attr)*] $visibility $name $(<$($generic $(: $bound $(+ $bound2)*)?),+>)?, *mut std::os::raw::c_void, (), $ffi_name,","highlight_start":1,"highlight_end":140},{"text":"            $( @ffi_class $ffi_class_name ,)?","highlight_start":1,"highlight_end":46},{"text":"            @type_ $get_type_expr,","highlight_start":1,"highlight_end":35},{"text":"            @extends [$($extends),+],","highlight_start":1,"highlight_end":38},{"text":"            @implements [$($($implements),+)?]","highlight_start":1,"highlight_end":47},{"text":"        );","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gtk4-0.8.2/src/auto/label.rs","byte_start":512,"byte_end":744,"line_start":19,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"glib::wrapper! {","highlight_start":1,"highlight_end":1},{"text":"    #[doc(alias = \"GtkLabel\")]","highlight_start":1,"highlight_end":1},{"text":"    pub struct Label(Object<ffi::GtkLabel>) @extends Widget, @implements Accessible, Buildable, ConstraintTarget;","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    match fn {","highlight_start":1,"highlight_end":1},{"text":"        type_ => || ffi::gtk_label_get_type(),","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"glib::wrapper!","def_site_span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/wrapper.rs","byte_start":8387,"byte_end":8407,"line_start":277,"line_end":277,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! wrapper {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::glib_object_wrapper!","def_site_span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":17988,"byte_end":18020,"line_start":618,"line_end":618,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! glib_object_wrapper {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::glib_object_wrapper!","def_site_span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":17988,"byte_end":18020,"line_start":618,"line_end":618,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! glib_object_wrapper {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::glib_object_wrapper!","def_site_span":{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/object.rs","byte_start":17988,"byte_end":18020,"line_start":618,"line_end":618,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! glib_object_wrapper {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/clone.rs","byte_start":298,"byte_end":317,"line_start":12,"line_end":12,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub trait Downgrade","highlight_start":1,"highlight_end":20}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `gtk4::Label: glib::clone::Downgrade` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:142:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let refresh_ui = clone!(@weak sinks_list, @weak streams_list, @weak default_sink_label => move || {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m ______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // Update default sink label\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(def) = get_default_sink_name() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            default_sink_label.set_text(&format!(\"Default sink: {}\", def));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        streams_list.show_all();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    });\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `glib::clone::Downgrade` is not implemented for `gtk4::Label`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mglib\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.18.5/src/clone.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Downgrade\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:1:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse gtk4::prelude::*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `glib` used here, as a dependency of crate `cairo`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse glib::{clone, timeout_add_local};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `glib` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glib-0.19.9/src/clone.rs:12:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub trait Downgrade\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/garuda/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gtk4-0.8.2/src/auto/label.rs:19:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mglib::wrapper! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[doc(alias = \"GtkLabel\")]\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Label(Object<ffi::GtkLabel>) @extends Widget, @implements Accessible, Buildable, ConstraintTarget;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `clone` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
